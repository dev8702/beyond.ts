# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: react-isomorphic-serverless-typescript # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs4.3

# you can overwrite defaults here
  stage: dev # Override this with command-line option when you deploy to production
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can add packaging information here
package:
  include: ./dist/bundle.js
#  exclude:
#    - exclude-me.js
#  artifact: my-service-code.zip

functions:
  ssr:
    handler: handler.SSR
    events:
      - http:
          method: get
          path: ${self:service}
          # response:
          #   headers:
          #     Content-Type: "'text/html'"
          # template: $input.path('$')


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000

# you can add CloudFormation resource templates here
# resources:
#   Resources:
#     CloudFrontDistribution:
#       Type: AWS::CloudFront::Distribution
#       Properties:
#         DistributionConfig:
#           DefaultRootObject: ''
#           Enabled: true
#           DefaultCacheBehavior:
#             AllowedMethods:
#               - GET
#               - HEAD
#             CachedMethods:
#               - HEAD
#               - GET
#             ForwardedValues:
#               QueryString: true
#               Headers:
#                 - original-uri
#                 - User-Agent
#                 - X-Forwarded-For
#             TargetOriginId: "${self:service}-${self:provider.stage}-api-gateway"
#             ViewerProtocolPolicy: redirect-to-https
#           Aliases: # Add domain names to allow to access. You must add Route53 addresses here.
#             - tylorsh.in
#             - www.tylorsh.in
#           Origins:
#           - CustomOriginConfig:
#               HTTPSPort: 443
#               OriginProtocolPolicy: https-only
#             DomainName:
#               "Fn::Join": ["", [{"Ref": "ApiGatewayRestApi"}, ".execute-api.${self:provider.region}.amazonaws.com"]]
#             Id: "${self:service}-${self:provider.stage}-api-gateway"
#             OriginPath: /${self:provider.stage}

#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
